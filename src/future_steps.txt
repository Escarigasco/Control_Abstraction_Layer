$Oliver Comments$


DONE
Controller Naming:
Attribute naming based on the bus bars employed - in this way you can also see if a future request try to overwrite the previous one
NO YOU HAVE TO DO NAMING AFTER SINK, SOURCE, PARAMETER - EVEN ON THE GRAPHS NODES
************THE CONTROLLERS ARE ACTUALLY NAMED WITH THE USER INPUT DICTIONARY SOURCES AND SINKS*************
$Yes$

Python Pump Mode:
You can send numbers too
$I think you can only send numbers now$

Check closed loop:
Closed loop is probably a strongly connected graph

CRUCIAL TO BE DETERMINED FOR FUTURE PROGRESSES:
-> API for Logical layer, now it is Source, Sink, Energy, Setpoint.
  It will include some list of components to be removed according to the Reasoning discriminators:
  Reasoning discriminators:
    TODO
  - active, inactive: this can be decided either by user input or by the online status.
                      In case of user input specification by name, the removed items can be removed by the
                      relevant lists of the active_components dictionary in message_for_controller.py before
                      the rule engine elaboration, careful to recalculate the number of element_sources/sinks
                      THE EASIEST AND SMARTEST WAY TO DO THIS IS THAT THE UPPER LAYER MAKE FIRST A SCREEN OF THE STUFF THAT DOESN'T WORK SO THE LOGICAL LAYER DOESN'T
                      NEED TO CHECK THE STATUS OF COMPONENTS BUT BUILD THE CONTROLLER BASED ON SOME COMPONENTS CONSTRAINS
                      $Upper Layer that decides the configuration add a upper function configuration-read online-configuration - yes lists components you don't want to use ----- logical layer does never talk to the equipment, it asks all the stuff to the to the physical layer$

  - Remote killing of the process? Or we should just kill it breaking the circuit?
    $Red button - can kill all process or just pause actuation (able to restart)$

  DONE
  - recommendation/preferences for the implementation - it can pass by TCP (always connected, is it stable?), pipe(as per the two process of the Logical Layer), or file in folder(typica_check is there is a file then ->)
  *******************************THIS IS NOW IN TCP MULTICLIENT***********************************************
    $It is Ok$

  TODO
-> Decision over NaN and 0, this is quite relevant
  - Decision over contactor (future work, this is a non trivial operation as you need motor protection plus contactor, need of space and heavely recabling - need
   to run cables + extensions behind pipes to bring stuff in a control cabin next to the PLC - integration in PLC(if enough DO/DI) + Syslab Poll)
   ************************************************************** the pump has a DI that do this for you, page 38 **************************************************************
   $Out of scope$
   $No for the pump$

-> How the system will handle requests in terms of - what happen if:
    TODO
  - we switch the configuration of the system with the same user input (e.g. we move the same experiment from busbars 1H-1C to 2H-2C), should  the controller $Now is the software that decides the configuration$
    be killed and restarted or it should not change? If stays an opening procedure for valves shall be carefully designed in the higher layer - You should think (Oliver) a tap transformer like routine to         minimize pressure increase --> careful that if the valves where the actuators you are in troubles
    --> expecially because if the previous circuit is broken the thread stops. If you want to kill it you just start a routine that breaks the circuit but then you also need a new input command
    $if necessary kill it or not$

    DONE
  - we change user input, should the controller kill the previous process? Not of course. Then it is necessary to build a dictionary memory with the previous
    user_input/matching_configuration to be able to run again a path_matching with the old user inputs requests. THIS IS VERY EXPENSIVE BUT EASILY DOABLE THEN YOU CAN REMOVE DICTIONARIES KEYS WITH dict.pop() AND KILL PROCESSES IF THE NEW CHECKING DOESN'T DETECT THE MATCH BETWEEN THE OLD REQUEST AND THE PREVIOUS USER INPUT
    *******************THIS IS NOW IMPLEMENTED AND OLD INPUTS ARE STORED AND CHECKED************ -> does it need error handling for two overlapping requests? it should never happen, it is a "bug" of the test rig
    ------------------------------------------------->>>>>>>>> what about on the fly setpoint change???????
    $Don't kill the process if not necessary$


DONE
-> Is it acceptable that:
    Case of multiple actuators and feedback sensors (e.g. one source - two sinks control over sinks pumps (same for valves) and the control
    loop of each pump is decoupled -> single control loop with multiple actuator - should be ok for double pumps at sinks, but you need   different implementation for valves as actuators (new controller.py)
    $watch out the hunting because you have the drop of pressure on the circuit that in$

-> Valve as actuator selection - if specified by Users by elements to be removed it is part of the API bit (the possibilities should be all cold, all hot, mixed). Check with the sources-sinks thing
   $At least priorities - hot lines, check status when you choose configuration only if necessary$

-> it is relevant to defend the system from wrong user inputs? DRAGONS
   $Yes and give feedback$
   this also mean to check if there are some valves open but not useful to anything or even harmful - should we kill the unuseful?
   in this case it is probably the controller that have a inizialization where kills everything but the relevant component - it needs to receive these
   object from the logical layer -> it is trivial but really time consuming as you should read the active valve of the relevant bays and kill the ones
   that do not belong to the matching path.
   -> the original sin of the the KW energy balance
    $No$
   -> message to kill process?
    $write here$
   -> what about it ask from not boosted to boosted?
    $The booster is not only the BH but can be anything -- just leave it out$
   -> what if the new configuration includes the old? The old would then never die
    $Overdue$
   -> what if we want to boost the old configuration, this would be equal to change the setpoint
    $Overdue$

-> is calculation from different sensors a redundancy for the controller? Of course it is but implementation would be a real pain and a real system
   would actually have a same component redundancy rather than software component --> in this case this is twice true as there is only one meter
   with different modbus register there is no reason to think that "some registers works and not other".
   But what if? Also the pump has a Energy reader - first implement that, than component redundancy and then calculation --> really annoying to implement
   if really needed you need a method that check what comes back from the rule engine and send to the controller the new sensors needed for calculation
   with another parameter that say "calculate energy or whatever" --> they are all multiplication so you don't need to keep track of the order
   -> Necessary to enable all sensors all around the system to build up redundancy - this may be missing in Java too (e.g. you can't get temperature from pump even though there is a MB register for it)
    $Yes we want the replacement$
    

TODO -->>> you can reverse the pump and use a bypass circuit
A sink is not always a sink so the source apart from the booster heater
Fix the booster heater (has to check if also the sink include 1BH4 and then set N)
Fix the rules
Check the line hot line cold because is dynamic now
$Not relevant at the moment$

-> papers on the heat switchboard
$No$
-> homework for when you are away
$plenty is there$
-> what is the theoretical background, the MES or the configuration problem?
$Only Control$


TODO
Should the components be checking their connectivity with the upper_layer/API and fail in case the connection is broken?

COMMENTS ON EXISTING COMPONENTS:
-> multiprocessing instead of Multithreading, only if you read Tue stuff
-> are LL and PL too decoupled with the TCP or not robust enough? Let's say that this decoupling allows access to the PL from outside
$No this is fine$
